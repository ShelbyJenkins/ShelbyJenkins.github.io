---
import { updateTailwindTheme, genenerateTailwindTheme} from 'src/utils/colorFun/src/index';
import { CUSTOM_THEME } from 'src/siteConfig';

const tailwindsTheme = genenerateTailwindTheme(CUSTOM_THEME);
const colors = tailwindsTheme.colors;

const palettes = {
    'primary': colors['primary'],
    'secondary': colors['secondary'],
    'tertiary': colors['tertiary'],
    'neutral': colors['neutral'],
    'neutral-variant': colors['neutral-variant'],
};
const paletteSteps = [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 950];

// <palette-input>
//     <div class="w-11/12 my-2 h-24 gap-2 grid grid-cols-3 place-items-center border-2 border-semantic-on-background-light/60 dark:border-semantic-on-background-dark/60 rounded">
//         <!-- <select class="select select-primary">
//             <option disabled selected>Select Scheme</option>
//             <option>SPLIT_COMPLEMENTARY</option>
//         </select>
//         <input type="text" placeholder="Enter Color" class="input w-full max-w-xs " /> -->
//         <button aria-label="Color Input">change it</button><span>0</span>
//     </div>
// </palette-input>
---
<div class="w-11/12 grid"> 
    <div class="py-2 my-2 grid grid-cols-[repeat(13,_minmax(0,_1fr))] place-items-center border-2 border-semantic-on-background-light/60 dark:border-semantic-on-background-dark/60 rounded ">
        <h1 class="col-start-1 col-span-2">Text</h1>
        <p class="col-start-3 col-span-2">Default Text</p>
        <p class="font-bold col-span-2">Bold Text</p>
        <p class="col-span-2 italic">Italic Text</p>
        <p class="col-span-2">Heading Text</p>
        <p class="col-span-3">Subheading Text</p>
    </div>
    <div class="py-2 my-2 grid grid-cols-[repeat(13,_minmax(0,_1fr))] place-items-center border-2 border-semantic-on-background-light/60 dark:border-semantic-on-background-dark/60 rounded">
        <h1 class="col-start-1 col-span-2">Links</h1>
        <p class="col-start-3 col-span-2 easy-link easy-link-always-link">Default Link</p>
        <p class="col-span-2 easy-link easy-link-always-hover easy-link-always-link">Hovered</p>
        <p class="col-span-2 easy-link easy-link-always-visited">Visited Link</p>
        <p class="col-span-2 easy-link easy-link-always-hover easy-link-always-visited">Hovered</p>
        <p class="col-span-2 easy-link easy-link-always-active">Active Link</p>
    </div>
</div>
</div>
<div class="w-11/12 pr-8 pb-8 my-2 grid grid-rows-6 gap-1 border-2 border-semantic-on-background-light/60 dark:border-semantic-on-background-dark/60 rounded">
    <div class="grid p-2 my-2 grid-cols-[repeat(13,_minmax(0,_1fr))] place-content-center ">
        {
            paletteSteps.map((step, index) => (
                <div class="col-span-1 text-center text-sm" style={{ gridColumnStart: index + 3 }}>{step}</div>
            ))
        }
    </div>
    {
        Object.entries(palettes).map(([colorName, colorFamily]) => (
            <div class="grid grid-cols-[repeat(13,_minmax(0,_1fr))] gap-1">
                <div class="col-start-1 col-span-2 text-right place-self-center">{colorName}</div>
                {
                    Object.entries(colorFamily).map(([shadeValue, colorCode]) => (
                        <div class="rounded py-8 px-2" style={{ backgroundColor: colorCode, color: colorCode }}>
                            </div>
                            ))
                        }
            </div>
        ))
    }
</div>
<!-- <script>
    import { updateTailwindTheme } from 'src/utils/colorFun/src/index';
    
    class PaletteInput extends HTMLElement {
      constructor() {
        super();
        let count = 0;
        const colorInput = this.querySelector('button');
        const countSpan = this.querySelector('span');
        colorInput.addEventListener('click', () => {
            for (const sheet of document.styleSheets) {
                if (sheet.cssRules.length > 100) {
                    count = updateTailwindTheme(sheet) + count
                }
            }
            
            
            countSpan.textContent = count.toString();
        });
      }
    }
  
    customElements.define('palette-input', PaletteInput);
</script> -->

