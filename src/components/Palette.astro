---
import { genenerateTailwindTheme, SchemeVariant, toOklchHue } from 'src/utils/colorFun/src/index';
import { CUSTOM_THEME } from 'src/siteConfig';

const tailwindsTheme = genenerateTailwindTheme(CUSTOM_THEME);
const colors = tailwindsTheme.colors;

const palettes = {
	primary: colors['primary'],
	secondary: colors['secondary'],
	tertiary: colors['tertiary'],
	neutral: colors['neutral'],
	'neutral-variant': colors['neutral-variant'],
};
const paletteSteps = Object.keys(colors['primary']);
---

<palette-input>
	<form name="color-form" class="flex h-28 w-11/12 justify-around pb-4 text-sm">
		<label class="form-control h-full min-w-max gap-1">
			<div class="label">
				<span class="w-full text-center">Select Scheme</span>
			</div>
			<div id="scheme-select" class="form-control grid min-w-max grid-cols-5 gap-x-2 gap-y-1 text-xs">
				{
					Object.entries(SchemeVariant).map(([key, variant]) => {
						const isChecked = variant === CUSTOM_THEME.schemeVariant;
						return (
							<label class="label flex min-w-max cursor-pointer flex-col items-start rounded-lg border px-2 pb-1">
								<span class="label-text pb-1">{variant}</span>
								<input
									type="radio"
									value={key}
									id={variant}
									name="radio-10"
									class="h-3 w-3 appearance-none rounded-full border border-semantic-primary-container checked:border-[5px] checked:border-semantic-primary"
									checked={isChecked}
								/>
							</label>
						);
					})
				}
			</div>
		</label>
		<label class="form-control flex h-full w-3/12 flex-col items-center gap-4">
			<div class="label">
				<span class="w-full text-center">Input Primary Color</span>
			</div>

			<input
				type="text"
				value={CUSTOM_THEME.primary}
				id="color-input-text"
				class="input input-xs h-9 w-24 rounded bg-semantic-surface-variant text-center text-sm font-semibold text-semantic-on-surface-variant"
			/>
			<input
				type="range"
				id="color-input-range"
				min="0"
				max="360"
				value={toOklchHue(CUSTOM_THEME.primary)}
				step="0.1"
				class="mx-2 h-4 w-full rounded-full"
			/>
		</label>
	</form>
</palette-input>
<div class="grid w-11/12 pt-4">
	<!-- <div
		class="py-2 my-2 grid grid-cols-[repeat(13,_minmax(0,_1fr))] place-items-center border-2 border-semantic-on-background/60 rounded"
	>
		<p class="col-start-1 col-span-2">text styles</p>
		<p class="col-start-3 col-span-2">Default Text</p>
		<p class="font-bold col-span-2">Bold Text</p>
		<p class="col-span-2 italic">Italic Text</p>
		<p class="col-span-2">Heading Text</p>
		<p class="col-span-3">Subheading Text</p>
	</div> -->
	<div
		class="my-2 grid grid-cols-[repeat(13,_minmax(0,_1fr))] place-items-center rounded border-2 border-semantic-on-background/60 py-2"
	>
		<p class="col-span-2 col-start-1">link styles</p>
		<p class="easy-link easy-link-always-link col-span-2 col-start-3">Default Link</p>
		<p class="easy-link easy-link-always-hover easy-link-always-link col-span-2">Hovered</p>
		<p class="easy-link easy-link-always-visited col-span-2">Visited Link</p>
		<p class="easy-link easy-link-always-hover easy-link-always-visited col-span-2">Hovered</p>
		<p class="easy-link easy-link-always-active col-span-2">Active Link</p>
	</div>
</div>
<div class="my-2 grid w-11/12 grid-rows-6 gap-1 rounded border-2 border-semantic-on-background/60 pb-8 pr-8">
	<div class="my-2 grid grid-cols-[repeat(13,_minmax(0,_1fr))] place-content-center p-2">
		{
			paletteSteps.map((step, index) => (
				<div
					class="col-span-1 text-center text-sm"
					style={{
						gridColumnStart: index + 3,
					}}
				>
					{step}
				</div>
			))
		}
	</div>
	{
		Object.entries(palettes).map(([colorName, colorFamily]) => (
			<div class="grid grid-cols-[repeat(13,_minmax(0,_1fr))] gap-1">
				<div class="col-span-2 col-start-1 place-self-center text-right">{colorName}</div>
				{Object.keys(colorFamily).map((shadeValue) => (
					<div
						class="rounded px-2 py-8"
						style={{
							backgroundColor: `oklch(var(--colors-${colorName}-${shadeValue}))`,
						}}
					/>
				))}
			</div>
		))
	}
</div>
<style>
	input[type='range'] {
		appearance: none;
		background-image: linear-gradient(
			90deg,
			oklch(45.12% 0.267 0),
			oklch(45.12% 0.267 90),
			oklch(45.12% 0.267 180),
			oklch(45.12% 0.267 270),
			oklch(45.12% 0.267 360)
		);
	}
</style>
<script>
	import {
		updateTailwindTheme,
		SchemeVariant,
		CustomThemeConfig,
		validateColorFromForm,
		validateColorFromRange,
		toOklchHue,
	} from 'src/utils/colorFun/src/index';
	document['color-form'].reset();

	class PaletteInput extends HTMLElement {
		constructor() {
			super();

			const colorInputText = document.getElementById('color-input-text') as HTMLInputElement;
			const colorInputRange = document.getElementById('color-input-range') as HTMLInputElement;
			const schemeSelect = document.getElementById('scheme-select') as HTMLSelectElement;
			let currentColorValue = colorInputText.value;

			colorInputText.addEventListener('input', () => {
				let colorMaybe = validateColorFromForm(colorInputText.value);
				if (!(colorMaybe === undefined)) {
					currentColorValue = colorMaybe;
					colorInputRange.value = toOklchHue(colorMaybe);
					updateTheme();
				}
			});
			colorInputRange.addEventListener('input', () => {
				const l = '0.4512';
				const c = '0.267';
				const h = colorInputRange.value;
				let colorMaybe = validateColorFromRange(l, c, h);
				if (!(colorMaybe === undefined)) {
					currentColorValue = colorMaybe;
					colorInputText.value = colorMaybe;
					updateTheme();
				}
			});

			function getSelectedScheme(): string {
				const radios = schemeSelect.querySelectorAll('input[type="radio"]');
				let selectedValue: string | undefined;
				radios.forEach((radio) => {
					if ((radio as HTMLInputElement).checked) {
						selectedValue = (radio as HTMLInputElement).value;
					}
				});
				if (selectedValue === undefined) {
					throw new Error('No scheme selected');
				}
				return selectedValue;
			}

			schemeSelect.addEventListener('change', () => {
				updateTheme();
			});

			function updateTheme() {
				const selectedSchemeVariant = getSelectedScheme();
				const newConfig: CustomThemeConfig = {
					primary: currentColorValue,
					schemeVariant: SchemeVariant[selectedSchemeVariant as keyof typeof SchemeVariant],
					// secondary: '#D07D12',
					// tertiary: '#003E1F',
					// neutral: '#d4e9f8',
					// neutralVarient: '#E8F5F2',
				};
				updateTailwindTheme(document.styleSheets, newConfig);
			}
		}
	}
	customElements.define('palette-input', PaletteInput);
</script>
