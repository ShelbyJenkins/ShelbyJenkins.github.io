---
import { easyConfig } from '../../easyConfig';
import FormattedDate from '../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { formatDescription } from '../utils/abbreviateDescription';
import BaseLayout from './BaseLayout.astro';
import { customGetCollection } from '../utils/customGetCollection';

const { blogCollectionName, basePath } = Astro.props;
const blogCollection = await customGetCollection(blogCollectionName, basePath);
let posts = blogCollection.sort((a, b) => {
	// Sort by updatedDate if available, otherwise fall back to pubDate
	const dateA = a.props.data.updatedDate ? new Date(a.props.data.updatedDate) : new Date(a.props.data.pubDate);
	const dateB = b.props.data.updatedDate ? new Date(b.props.data.updatedDate) : new Date(b.props.data.pubDate);
	// Sort in descending order (newest first)
	return dateB.valueOf() - dateA.valueOf();
});
const heroImage = posts.length > 0 ? posts[0].props.data.heroImage : undefined;
const heroAlt = posts.length > 0 ? posts[0].props.data.heroAlt : undefined;
---

<BaseLayout title={easyConfig.site_title} page_description={easyConfig.site_description} heroImage={heroImage} heroAlt={heroAlt}>
	<ul class="flex w-full list-none flex-col items-start py-4 md:pl-[15svw] md:pr-[7.5svw]">
		{
			posts.map((post, i) => {
				return (
					<>
						<li class="flex w-full flex-col sm:max-h-[47svh] sm:min-h-[27svh] md:max-h-[37svh] md:min-h-[33vh] lg:max-h-[27svh] lg:min-h-[23svh]">
							<a
								class="group flex h-full min-w-full items-center justify-between hover:no-underline"
								href={`${post.params.htmlSlug}`}
							>
								<div class="flex h-full w-full flex-col justify-start ">
									<div class="font-medium text-semantic-on-background/70 sm:text-xs md:text-xs ">
										<FormattedDate
											date={
												post.props.data.updatedDate ? new Date(post.props.data.updatedDate) : new Date(post.props.data.pubDate)
											}
										/>
									</div>
									<div class="flex w-full justify-between sm:h-[66%] md:h-[66%] lg:h-[73%] ">
										<div class="mr-[5%] flex h-full w-[60%] flex-col  ">
											<h1 class="line-clamp-5 hyphens-auto break-words font-semibold group-hover:text-semantic-primary sm:line-clamp-5 sm:text-base sm:leading-5 md:line-clamp-2  md:text-lg md:font-bold ">
												{post.props.data.title}
											</h1>
											<p class="line-clamp-6 text-sm sm:hidden">
												{formatDescription('desktop', post.props.data.description, post.props.body, post.props.data.title)}
											</p>
											<p class="line-clamp-5 text-xs md:hidden">
												{formatDescription('mobile', post.props.data.description, post.props.body, post.props.data.title)}
											</p>
										</div>

										<div class="group-hover:shadow-gradient  flex h-full w-[35%] rounded-xl  ">
											{post.props.data.heroImage ? (
												<Image
													class="rounded-xl object-cover"
													src={post.props.data.heroImage}
													alt={post.props.data.heroAlt || ''}
												/>
											) : (
												<div class="h-full w-full rounded-xl bg-semantic-primary-container/20" />
											)}
										</div>
									</div>
									<div class="text-xs font-normal italic  text-semantic-on-background/70 md:text-base lg:text-xs">
										{[post.props.data.readingTime]}
									</div>
									{posts.length != i + 1 && <hr class="mb-4 mt-auto w-full  border-semantic-on-surface-variant/15 " />}
								</div>
							</a>
						</li>
					</>
				);
			})
		}
	</ul>
</BaseLayout>
<style>
	a {
		color: theme(colors.semantic.on-background);
	}
</style>
